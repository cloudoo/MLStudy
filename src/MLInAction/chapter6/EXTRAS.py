import numpy
import matplotlib.pyplot as plt
from matplotlib.patches import Circle

def plotRBF(filepath):
    xcord0 = []; ycord0 = []; xcord1 = []; ycord1 = []
    fw = open(filepath, 'w')  # generate data
    
    fig = plt.figure()
    ax = fig.add_subplot(111)
    xcord0 = []; ycord0 = []; xcord1 = []; ycord1 = []
    for i in range(100):
        [x, y] = numpy.random.uniform(0, 1, 2)
        xpt = x * numpy.cos(2.0 * numpy.pi * y); ypt = x * numpy.sin(2.0 * numpy.pi * y)
        if (x > 0.5):
            xcord0.append(xpt); ycord0.append(ypt)
            label = -1.0
        else:
            xcord1.append(xpt); ycord1.append(ypt)
            label = 1.0
        fw.write('%f\t%f\t%f\n' % (xpt, ypt, label))
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('Non-linearly Separable Data for Kernel Method')
    plt.show()
    fw.close()
    
def plotSupportVectors(filepath):
    xcord0 = []
    ycord0 = []
    xcord1 = []
    ycord1 = []
    markers = []
    colors = []
    fr = open(filepath)  # this file was generated by 2normalGen.py
    for line in fr.readlines():
        lineSplit = line.strip().split('\t')
        xPt = float(lineSplit[0])
        yPt = float(lineSplit[1])
        label = int(lineSplit[2])
        if (label == -1):
            xcord0.append(xPt)
            ycord0.append(yPt)
        else:
            xcord1.append(xPt)
            ycord1.append(yPt)
    
    fr.close()
    fig = plt.figure()
    ax = fig.add_subplot(111)
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('Support Vectors Circled')
    circle = Circle((4.6581910000000004, 3.507396), 0.5, facecolor='none', edgecolor=(0, 0.8, 0.8), linewidth=3, alpha=0.5)
    ax.add_patch(circle)
    circle = Circle((3.4570959999999999, -0.082215999999999997), 0.5, facecolor='none', edgecolor=(0, 0.8, 0.8), linewidth=3, alpha=0.5)
    ax.add_patch(circle)
    circle = Circle((6.0805730000000002, 0.41888599999999998), 0.5, facecolor='none', edgecolor=(0, 0.8, 0.8), linewidth=3, alpha=0.5)
    ax.add_patch(circle)
    # plt.plot([2.3,8.5], [-6,6]) #seperating hyperplane
    b = -3.75567; w0 = 0.8065; w1 = -0.2761
    x = numpy.arange(-2.0, 12.0, 0.1)
    y = (-w0 * x - b) / w1
    ax.plot(x, y)
    ax.axis([-2, 12, -8, 6])
    plt.show()

def notLinSeperable(filepath):
    xcord0 = []; ycord0 = []; xcord1 = []; ycord1 = []
    markers = []
    colors = []
    fr = open(filepath)  # this file was generated by 2normalGen.py
    for line in fr.readlines():
        lineSplit = line.strip().split('\t')
        xPt = float(lineSplit[0])
        yPt = float(lineSplit[1])
        label = int(lineSplit[2])
        if (label == 0):
            xcord0.append(xPt)
            ycord0.append(yPt)
        else:
            xcord1.append(xPt)
            ycord1.append(yPt)
    
    fr.close()
    fig = plt.figure()
    ax = fig.add_subplot(221)
    xcord0 = []; ycord0 = []; xcord1 = []; ycord1 = []
    for i in range(300):
        [x, y] = numpy.random.uniform(0, 1, 2)
        if ((x > 0.5) and (y < 0.5)) or ((x < 0.5) and (y > 0.5)):
            xcord0.append(x); ycord0.append(y)
        else:
            xcord1.append(x); ycord1.append(y)
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('A')
    ax = fig.add_subplot(222)
    xcord0 = numpy.random.standard_normal(150); ycord0 = numpy.random.standard_normal(150)
    xcord1 = numpy.random.standard_normal(150) + 2.0; ycord1 = numpy.random.standard_normal(150) + 2.0
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('B')
    ax = fig.add_subplot(223)
    xcord0 = []; ycord0 = []; xcord1 = []; ycord1 = []
    for i in range(300):
        [x, y] = numpy.random.uniform(0, 1, 2)
        if (x > 0.5):
            xcord0.append(x * numpy.cos(2.0 * numpy.pi * y)); ycord0.append(x * numpy.sin(2.0 * numpy.pi * y))
        else:
            xcord1.append(x * numpy.cos(2.0 * numpy.pi * y)); ycord1.append(x * numpy.sin(2.0 * numpy.pi * y))
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('C')
    ax = fig.add_subplot(224)
    xcord1 = numpy.zeros(150); ycord1 = numpy.zeros(150)
    xcord0 = numpy.random.uniform(-3, 3, 350); ycord0 = numpy.random.uniform(-3, 3, 350);
    xcord1[0:50] = 0.3 * numpy.random.standard_normal(50) + 2.0; ycord1[0:50] = 0.3 * numpy.random.standard_normal(50) + 2.0
    
    xcord1[50:100] = 0.3 * numpy.random.standard_normal(50) - 2.0; ycord1[50:100] = 0.3 * numpy.random.standard_normal(50) - 3.0
    
    xcord1[100:150] = 0.3 * numpy.random.standard_normal(50) + 1.0; ycord1[100:150] = 0.3 * numpy.random.standard_normal(50)
    ax.scatter(xcord0, ycord0, marker='s', s=90)
    ax.scatter(xcord1, ycord1, marker='o', s=50, c='red')
    plt.title('D')
    plt.show()
